services:
  nginx:
    build: ./nginx
    ports:
      # - "8080:80"
      - "80:80"
    volumes:
      - .:/var/www/html # Local files
      - vendor_data:/var/www/html/vendor # From PHP container (need named volume for vendor and wp as the above mount would override what is generated inside container via `composer install`)
      - wp_core:/var/www/html/web/wp # From PHP container
    depends_on:
      - php
    networks:
      - app

  php:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/var/www/html

      # Vendor and wp are generated via composer inside the container, so do not override with local files
      - vendor_data:/var/www/html/vendor
      - wp_core:/var/www/html/web/wp

      # Do not override plugins that were generated inside the container via composer in php image
      - mu-plugins:/var/www/html/web/app/mu-plugins
      - plugins:/var/www/html/web/app/plugins

      # Custom plugins must be bind mounted, as they are not composer generate (of course). mu-plugins folder doesn't allow nested plugins (e.g. mu-plugins/custom-plugins/<multiple_plugin_folders>), so have to list one-by-one here
      - ./web/app/mu-plugins/multisite-url-fixer:/var/www/html/web/app/mu-plugins/multisite-url-fixer
      - ./web/app/mu-plugins/bedrock-autoloader.php:/var/www/html/web/app/mu-plugins/bedrock-autoloader.php
      # Standard plugins folder allows nested, so all custom plugins can go in /custom-plugins
      - ./web/app/plugins/custom-plugins:/var/www/html/web/app/plugins/custom-plugins
    env_file: .env
    networks:
      - app

  mysql:
    image: mysql:8.0
    container_name: bedrock-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - app

volumes:
  dbdata:
  vendor_data:
  wp_core:
  mu-plugins:
  plugins:

networks:
  app:
    driver: bridge
